/* Generated By:JJTree&JavaCC: Do not edit this line. PCRE.java */
package org.comp.pcre.grammar;

import org.comp.pcre.automata.QuantifierState;


public class PCRE/*@bgen(jjtree)*/implements PCRETreeConstants, PCREConstants {/*@bgen(jjtree)*/
  protected JJTPCREState jjtree = new JJTPCREState();public static void main( String[] args ) throws ParseException, TokenMgrError {
                System.out.println("oi");
                while(true)
                {

                        PCRE parser = new PCRE( System.in ) ;

                        SimpleNode val = parser.Start() ;
                        System.out.println("Val:"+val.toString());
                        val.dump("");

                }
        }

  final public SimpleNode Start() throws ParseException {
                     /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LF:
        jj_consume_token(LF);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
        case OPEN_ROUND_BRACKET:
        case CHARACTER:
        case MISC:
        case ESCAPED:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        Element();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALTERNATE:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          ORexp();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Element() throws ParseException {
 /*@bgen(jjtree) Element */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER:
      case MISC:
      case ESCAPED:
        Chars();
        break;
      case OPEN_ROUND_BRACKET:
        ExpPRT();
        break;
      case DOT:
        CharTypes();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AST:
      case PLUS:
      case INTERROGATION:
      case OPEN_BRACKET:
        Quantifier();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExpPRT() throws ParseException {
 /*@bgen(jjtree) PRT */
  SimpleNode jjtn000 = new SimpleNode(JJTPRT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_ROUND_BRACKET);
      Expression();
      jj_consume_token(CLOSE_ROUND_BRACKET);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ORexp() throws ParseException {
    jj_consume_token(ALTERNATE);
                 SimpleNode jjtn001 = new SimpleNode(JJTOR);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
    try {
      Element();
    } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
    } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
    }
  }

/*void Range()://SETVALUE NOT ENOUGH; 
{Token t1,t2,t3,t4,t5,t6;}
{
	<OPEN_SQ_BRACKET >
	(t1 = < CARET >)*
	(//LOOKAHEAD(2)
		  (t2 =< CHARACTER > t3= < RANGE > t4=< CHARACTER > )
		| (t2 =< NUMBER > t3= < RANGE > t4=< NUMBER > )
		| Chars()
		| CharTypes()
	)+
	<CLOSE_SQ_BRACKET >
}*/
  final public void Chars() throws ParseException {
 /*@bgen(jjtree) Chars */
 SimpleNode jjtn000 = new SimpleNode(JJTCHARS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t1,t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER:
        t1 = jj_consume_token(CHARACTER);
        break;
      case MISC:
        t1 = jj_consume_token(MISC);
        break;
      case ESCAPED:
        t1 = jj_consume_token(ESCAPED);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           jjtn000.jjtSetValue (t1.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public Token CharTypes() throws ParseException {
 /*@bgen(jjtree) CharTypes */
 SimpleNode jjtn000 = new SimpleNode(JJTCHARTYPES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(DOT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.jjtSetValue (t.image);{if (true) return t;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Quantifier() throws ParseException {
 /*@bgen(jjtree) Quantifier */
  SimpleNode jjtn000 = new SimpleNode(JJTQUANTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);QuantifierState state = new QuantifierState();
  jjtn000.jjtSetValue (state);
  Token t1,t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AST:
      case PLUS:
      case INTERROGATION:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AST:
          t1 = jj_consume_token(AST);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          state.type = QuantifierState.Type.ZERO_OR_MORE; state.setValue(t1.image);
          break;
        case INTERROGATION:
          t1 = jj_consume_token(INTERROGATION);
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                    state.type = QuantifierState.Type.ZERO_OR_ONE; state.setValue(t1.image);
          break;
        case PLUS:
          t1 = jj_consume_token(PLUS);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           state.type = QuantifierState.Type.ONE_OR_MORE; state.setValue(t1.image);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case OPEN_BRACKET:
           state.type = QuantifierState.Type.EXACTLY_X;
        jj_consume_token(OPEN_BRACKET);
        t1 = jj_consume_token(NUMBER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          t2 = jj_consume_token(NUMBER);
             state.type = QuantifierState.Type.RANGED; state.setMax(t2.image);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(CLOSE_BRACKET);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           state.setValue(t1.image);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  /** Generated Token Manager. */
  public PCRETokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x21,0x7001010,0x80000,0x7001010,0x4c40,0x7000000,0xc40,0x8000,0x4c40,};
   }

  /** Constructor with InputStream. */
  public PCRE(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PCRE(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PCRETokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PCRE(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PCRETokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PCRE(PCRETokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PCRETokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
