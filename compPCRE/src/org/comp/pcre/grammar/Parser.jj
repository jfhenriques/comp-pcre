/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  static = false;
  LOOKAHEAD=1;
}

PARSER_BEGIN(PCRE)

package org.comp.pcre.grammar;

import org.comp.pcre.automata.QuantifierState;


public class PCRE/*@bgen(jjtree)*/implements PCRETreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTPCREState jjtree = new JJTPCREState();

/*@egen*/
 	public static void main( String[] args ) throws ParseException, TokenMgrError {
		System.out.println("oi");
		while(true)
		{
	
	  		PCRE parser = new PCRE( System.in ) ;
	  
			SimpleNode val = parser.Start() ;
			System.out.println("Val:"+val.toString());
			val.dump("");
	
		}
	}
}

PARSER_END(PCRE)

SKIP :
{
" " | "\t" | "\r" 
}

TOKEN : /* IDENTIFIERS */
{
  <DOT: "."> /* any character except newline /  in dotall mode, any character whatsoever */
| <LF: "\n">    
| <DEC: "\\d">    /* any decimal digit */
| <TAB: "\\t">    /* tab */
| <AST: "*" >
| <NULL: "\\0">    /* null char */
//| <WHITES: "\\s">     /* any white space character */
//| <NWHITES: "\\S">    /*  any character that is not a white space character */
//| <WORD: "\\w">         /*     any "word" character */
//| <NWORD: "\\W">         /*     any "non-word" character */
//| <ESCAPE: "\\e">
| <SLASH: "\\" >
| <NEWLINE: "\\n">
| <CARRIAGE_RETURN: "\\r">
| <PLUS: "+"> /*  	Matches the preceding pattern element one or more times. */
| <INTERROGATION: "?"> /* 	Matches the preceding pattern element zero or one times. OR  	Modifies the *, +, or {M,N}'d regexp that comes before to match as few times as possible.*/
| <OPEN_ROUND_BRACKET: "(">
| <CLOSE_ROUND_BRACKET: ")">
| <OPEN_BRACKET: "{"> 
| <COMMA: ",">
| <CLOSE_BRACKET: "}">
| <OPEN_SQ_BRACKET: "[">
| <CLOSE_SQ_BRACKET: "]">
| <ALTERNATE: "|">
| <CARET: "^" > /*  	 start of subject  also after internal newline in multiline mode */
| <DOLLAR: "$"> /* end of subject / also before newline at end of subject /also before internal newline in multiline mode */
| <RANGE: "-" >
/* Symbols */
| <NUMBER: (["0"-"9"])+ >
| <CHARACTER: ["a"-"z"] | ["A"-"Z"] >
| < MISC: "!"|"#"|"$"|"\""|"$"|"'"|"/"|":"|"&"|"="|"\u00ab"|"\u00bb"|"@"|"<"|">"|"~"|"\u00b4"|"`"|"\u00ba"|"\u00aa"|"_"|";" >
| < ESCAPED: < SLASH >(< SLASH > | <CARET >|<DOLLAR >|<DOT >
						|<OPEN_SQ_BRACKET >|< CLOSE_SQ_BRACKET ><ALTERNATE >
						| <OPEN_ROUND_BRACKET >|<CLOSE_ROUND_BRACKET >
						| < OPEN_BRACKET > | < CLOSE_BRACKET >
						|<INTERROGATION >|<AST >|<PLUS >|< NULL >
						|< DEC >|< TAB >|< NEWLINE >|< CARRIAGE_RETURN >) >
}

SimpleNode Start(): {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
   try {
/*@egen*/
   
   Expression() (< LF > | < EOF >)/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Expression() :
{/*@bgen(jjtree) Expression */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	//(t1 = <CARET > {jjtThis.jjtSetValue (t1.image);})?
	(Element() (ORexp())* )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	//(t2 = <DOLLAR > {jjtThis.jjtSetValue (t2.image);})?
}
void Element() :
{/*@bgen(jjtree) Element */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Element */
  try {
/*@egen*/
  ( Chars() | ExpPRT() |CharTypes()/*|AnchorAndSimpleAssertions()*/|Range())(Quantifier())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}
void ExpPRT()     :
{/*@bgen(jjtree) PRT */
  SimpleNode jjtn000 = new SimpleNode(JJTPRT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PRT */
  try {
/*@egen*/
  <OPEN_ROUND_BRACKET > Expression() <CLOSE_ROUND_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ //#close 
}

void ORexp()      :
{}
{
  
 <ALTERNATE >/*@bgen(jjtree) OR */
               {
                 SimpleNode jjtn001 = new SimpleNode(JJTOR);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/  Element()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/    
}

void Range()://SETVALUE NOT ENOUGH; 
{/*@bgen(jjtree) Range */
 SimpleNode jjtn000 = new SimpleNode(JJTRANGE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1,t2,t3,t4,t5,t6;}
{/*@bgen(jjtree) Range */
        try {
/*@egen*/
	<OPEN_SQ_BRACKET >
	(t1 = < CARET >)*
	(//LOOKAHEAD(2)
		  (t2 =< CHARACTER > t3= < RANGE > t4=< CHARACTER > )
		| (t2 =< NUMBER > t3= < RANGE > t4=< NUMBER > )
		| Chars()
		| CharTypes()
	)+
	<CLOSE_SQ_BRACKET >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Chars():
{/*@bgen(jjtree) Chars */
 SimpleNode jjtn000 = new SimpleNode(JJTCHARS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1,t2;}
{/*@bgen(jjtree) Chars */
  try {
/*@egen*/
  (
	  t1 = < CHARACTER >
	| t1 = < MISC >
	| t1 = < ESCAPED >
	)/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.jjtSetValue (t1.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


Token CharTypes():
{/*@bgen(jjtree) CharTypes */
 SimpleNode jjtn000 = new SimpleNode(JJTCHARTYPES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) CharTypes */
  try {
/*@egen*/
  (
	  t = < DOT >
//    | t= < DEC > | t= < WHITES >
	//| t= < NWHITES > | t= < WORD > | t = < NWORD >
	| t=< NULL > | t = < NEWLINE > | t = < CARRIAGE_RETURN >
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  
  {jjtn000.jjtSetValue (t.image);return t;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Quantifier():
{/*@bgen(jjtree) Quantifier */
  SimpleNode jjtn000 = new SimpleNode(JJTQUANTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  QuantifierState state = new QuantifierState();
  jjtn000.jjtSetValue (state);
  Token t1,t2;
}
{/*@bgen(jjtree) Quantifier */
    try {
/*@egen*/
    (
      	  ( t1 = < AST >/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {state.type = QuantifierState.Type.ZERO_OR_MORE; state.setValue(t1.image); })
     	| ( t1 = < INTERROGATION >/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ {state.type = QuantifierState.Type.ZERO_OR_ONE; state.setValue(t1.image); })
     	| ( t1 = < PLUS >/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {state.type = QuantifierState.Type.ONE_OR_MORE; state.setValue(t1.image); }) 
  	) | (

	  {state.type = QuantifierState.Type.EXACTLY_X;}
  	  	  <OPEN_BRACKET >
	  t1 = < NUMBER >
	  (
	    < COMMA >
	    t2 = < NUMBER >

	    {state.type = QuantifierState.Type.RANGED; state.setMax(t2.image);}
	  )?
	  <CLOSE_BRACKET >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/

	  {state.setValue(t1.image);}
	)/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}