/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  static = false;
  LOOKAHEAD=1;
}

PARSER_BEGIN(PCRE)

package org.comp.pcre.grammar;

import java.io.ByteArrayInputStream;
import java.io.InputStream;


public class PCRE
{
 public static void main( String[] args )
throws ParseException, TokenMgrError {
  System.out.println("oi");
while(true)
{

  PCRE parser = new PCRE( System.in ) ;
  
SimpleNode val = parser.Start() ;
System.out.println("Val:"+val.toString());
val.dump("");
//break;
//ToNFA oi = new ToNFA(val);
}

}
}

PARSER_END(PCRE)

SKIP :
{
" " | "\t" | "\r" 
}

TOKEN : /* IDENTIFIERS */
{
  <DOT: "."> /* any character except newline /  in dotall mode, any character whatsoever */
| <LF: "\n">    
| <DEC: "\\d">    /* any decimal digit */
| <TAB: "\\t">    /* tab */
| <AST: "*" >
| <NULL: "\\0">    /* null char */
//| <WHITES: "\\s">     /* any white space character */
//| <NWHITES: "\\S">    /*  any character that is not a white space character */
//| <WORD: "\\w">         /*     any "word" character */
//| <NWORD: "\\W">         /*     any "non-word" character */
//| <ESCAPE: "\\e">
| <SLASH: "\\" >
| <NEWLINE: "\\n">
| <CARRIAGE_RETURN: "\\r">
| <PLUS: "+"> /*  	Matches the preceding pattern element one or more times. */
| <INTERROGATION: "?"> /* 	Matches the preceding pattern element zero or one times. OR  	Modifies the *, +, or {M,N}'d regexp that comes before to match as few times as possible.*/
| <OPEN_ROUND_BRACKET: "(">
| <CLOSE_ROUND_BRACKET: ")">
| <OPEN_BRACKET: "{"> 
| <COMMA: ",">
| <CLOSE_BRACKET: "}">
| <OPEN_SQ_BRACKET: "[">
| <CLOSE_SQ_BRACKET: "]">
| <ALTERNATE: "|">
| <CARET: "^" > /*  	 start of subject  also after internal newline in multiline mode */
| <DOLLAR: "$"> /* end of subject / also before newline at end of subject /also before internal newline in multiline mode */
| <RANGE: "-" >
/* Symbols */
| <NUMBER: (["0"-"9"])+ >
| <CHARACTER: ["a"-"z"] | ["A"-"Z"] >
| < MISC: "!"|"#"|"$"|"\""|"$"|"'"|"/"|":"|"&"|"="|"«"|"»"|"@"|"<"|">"|"~"|"´"|"`"|"º"|"ª"|"_"|";" >
| < ESCAPED: < SLASH >(< SLASH > | <CARET >|<DOLLAR >|<DOT >
						|<OPEN_SQ_BRACKET >|<ALTERNATE >|<CLOSE_SQ_BRACKET >
						|<OPEN_ROUND_BRACKET >|<CLOSE_ROUND_BRACKET >
						|<INTERROGATION >|<AST >|<PLUS >|< NULL >
						|< DEC >|< TAB >|< NEWLINE >|< CARRIAGE_RETURN >) >
}

SimpleNode Start(): {}
{
   
   Expression() (< LF > | < EOF >) {return jjtThis;}
}

void Expression() :
{Token t1, t2;}
{
(t1 = <CARET > {jjtThis.jjtSetValue (t1.image);})?
(MainExpression())*
(t2 = <DOLLAR > {jjtThis.jjtSetValue (t2.image);})?

}
void MainExpression() #void:
{}
{
  ( ORexp() | Chars() | ExpPRT() |CharTypes()/*|AnchorAndSimpleAssertions()*/|Range())(Quantifier())?

}
void ExpPRT() #PRT:
{}
{
  <OPEN_ROUND_BRACKET > Expression() <CLOSE_ROUND_BRACKET > #close 
}

void ORexp() #void:
{}
{
 <ALTERNATE >  Expression()  #OR 
}

void Range()://SETVALUE NOT ENOUGH; 
{Token t1,t2,t3,t4,t5,t6;}
{
<OPEN_SQ_BRACKET >
(t1 = < CARET >)*
(//LOOKAHEAD(2)
	  (t2 =< CHARACTER > t3= < RANGE > t4=< CHARACTER > )
	| (t2 =< NUMBER > t3= < RANGE > t4=< NUMBER > )
	| Chars()
	| CharTypes()
)+
<CLOSE_SQ_BRACKET >
   

}

  
void Chars():
{Token t1,t2;}
{
  (
	  t1 = < CHARACTER >
	| t1 = < MISC >
	| t1 = < ESCAPED >
	) {jjtThis.jjtSetValue (t1.image);}

	/*| (t1 =< SLASH >
		( t2= < SLASH > | t2= <CARET > | t2= <DOLLAR > | t2= <DOT >
			| t2= <OPEN_SQ_BRACKET > | t2= <ALTERNATE > | t2= <CLOSE_SQ_BRACKET >
			| t2= <OPEN_ROUND_BRACKET > | t2= <CLOSE_ROUND_BRACKET >
			| t2= <INTERROGATION > | t2= <AST > | t2= <PLUS >
//			| t2 = CharTypes()
		)
		{jjtThis.jjtSetValue (t2.image);}
	)*/
}


Token CharTypes():
{Token t = null;}
{
  (
	  t = < DOT >
//    | t= < DEC > | t= < WHITES >
	//| t= < NWHITES > | t= < WORD > | t = < NWORD >
	| t=< NULL > | t = < NEWLINE > | t = < CARRIAGE_RETURN >
  )
  
  {jjtThis.jjtSetValue (t.image);return t;}
}

/*void AnchorAndSimpleAssertions() :
{Token t;}
{
  (
      t= < WORD_BOUND > | t=  <NOT_WORD_BOUND > | t=  < SLASH_CA_A >
    | t= < SLASH_CA_Z > | t=  < SLASH_Z >
    | t= <  SLASH_CA_G >
   )

   {jjtThis.jjtSetValue (t.image);}
}*/

void Quantifier():
{Token t1,t2,t3,t4,t5;}
{
  (
    (
      	t1 = < AST > 
  		| t1 = < INTERROGATION >
  		| t1 = < PLUS >
  	)
   	{jjtThis.jjtSetValue (t1.image);}
  )
|
(//SETVALUE NOT ENOUGH; 
  t1 = <OPEN_BRACKET >
  t2 = < NUMBER >
  ((t3 = <CLOSE_BRACKET > )
  | (t3 = < COMMA > ( (t4 = < CLOSE_BRACKET >) | (t4 = < NUMBER > t5 = <CLOSE_BRACKET >))))
) 
}